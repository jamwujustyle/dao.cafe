name: Test and Deploy

on:
  # Run tests on PRs to development and main
  pull_request:
    branches: [ development, main ]

  # Run full pipeline (including deploy) only on pushes to main
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.2-alpine3.21
        env:
          POSTGRES_DB: db
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          DJANGO_ENV_FILE: .env.development
          DB_HOST: localhost
          DB_NAME: db
          DB_USER: dev
          DB_PASSWORD: secret
          SECRET_KEY: test_secret_key
          DEBUG: 'True'
          REDIS_HOST: localhost
          DRPC_API_KEY: PLACEHOLDER

        run: |
          python manage.py test

  build-and-deploy:
    name: Build and Deploy
    # Only run this job on pushes to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate deployment token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /home/${{ secrets.PROD_USERNAME }}/daocafe-server
            cd /home/${{ secrets.PROD_USERNAME }}/daocafe-server

            # Clone or update the repository using SSH
            if [ -d ".git" ]; then
              git pull
            else
              git clone git@github.com:${{ github.repository }}.git .
            fi

            # Ensure SSL directory exists
            mkdir -p nginx/ssl

            # Write SSL certificates from secrets
            echo "${{ secrets.SSL_CERTIFICATE }}" > nginx/ssl/certificate.pem
            echo "${{ secrets.SSL_PRIVATE_KEY }}" > nginx/ssl/private.key

            # Verify SSL certificate permissions
            chmod 600 nginx/ssl/private.key

            # Login to GitHub Container Registry with the app token
            echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Deploy with docker-compose (production mode - with NGINX)
            # Set environment variables for GitHub Container Registry image
            export GITHUB_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export GITHUB_REF_NAME="${{ github.ref_name }}"

            # Pull the pre-built image from GitHub Container Registry
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull

            # Create a .env file to ensure DJANGO_ENV_FILE is properly set
            echo "DJANGO_ENV_FILE=.env.production" > .env

            # Export variables from .env.production to the environment
            export $(grep -v '^#' .env.production | xargs)

            # Explicitly login before pulling or deploying
            echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u DAOCafe --password-stdin

            # Start the services using the pulled image
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production up -d

            # Clean up unused images
            docker system prune -af
