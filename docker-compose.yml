services:
  app:
    restart: "on-failure"
    volumes:
      - ./:/server
      - media_volume:/vol/web/media
      - static_volume:/vol/web/static
    networks:
      - app-network
    depends_on:
      - db
      - redis
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ${DJANGO_ENV_FILE:-.env.development}
    environment:
      - DJANGO_ENV_FILE=${DJANGO_ENV_FILE:-.env.development}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}

  celery:
    restart: always
    networks:
      - app-network
    depends_on:
      - redis
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ${DJANGO_ENV_FILE:-.env.development}
    environment:
      - DJANGO_ENV_FILE=${DJANGO_ENV_FILE:-.env.development}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./:/server

  celery-beat:
    restart: always
    networks:
      - app-network
    depends_on:
      - redis
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ${DJANGO_ENV_FILE:-.env.development}
    environment:
      - DJANGO_ENV_FILE=${DJANGO_ENV_FILE:-.env.development}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./:/server
      - celerybeat-schedule:/var/celery

  db:
    image: postgres:17.2-alpine3.21
    networks:
      - app-network
    env_file:
      - ${DJANGO_ENV_FILE:-.env.development}
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    command: redis-server --save 60 1 --loglevel warning
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  media_volume:
  static_volume:
  celerybeat-schedule:
